Вопрос:
Как итераторы, порождаемые оператором yield return, так и волокна, являются объектами пользовательского адресного пространства. То есть, ответственность за их (фактически кооперативное) планирование лежит на плечах программиста, ОС о них «ничего не знает». И раз мы ограничены в количестве создаваемых нитей (объектов пространства ядра), то можно попробовать решить задачу масштабирования по количеству клиентов на неблокирующем I/O в пространстве пользователя.
Получится ли у нас волокнами (или итераторами) организовать переключение между задачами (клиентами) ввода-вывода при использовании классических, блокирующих поток исполнения, функций?

Ответ:
Нет.